{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MyWeatherComponent","props","onChangeCity","e","setState","city","target","value","getWeather","url","state","selectedData","fetch","then","res","json","data","slice","map","item","date","Date","datetime","toDateString","day","substr","maxTemp","max_temp","minTemp","min_temp","humidity","rh","icon","weather","description","weatherForecastData","returnedCityState","city_name","isNumeric","state_code","country_code","timezone","error","catch","currentTime","inputtxt","match","setInterval","toLocaleTimeString","id","this","className","onChange","name","onClick","index","key","src","process","alt","height","width","React","Component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"sMAKMA,G,kBACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAURC,aAAe,SAACC,GACd,EAAKC,SAAS,CAACC,KAAMF,EAAEG,OAAOC,SAZb,EAkCnBC,WAAa,WACX,IAAIC,EAAG,6DAAyD,EAAKC,MAAML,KAApE,wBAtCc,oCAuCjBM,EAAe,GAEnBC,MAAMH,GACLI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJJ,EAAeI,EAAKC,KAAKC,MAAM,EAAG,GAAGC,KAAI,SAACC,GACxC,MAAO,CAACC,KAAM,IAAIC,KAAKF,EAAKG,UAAUC,eAAgBC,IAAK,IAAIH,KAAKF,EAAKG,UAAUC,eAAeE,OAAO,EAAG,GAAIC,QAASP,EAAKQ,SAAUC,QAAST,EAAKU,SAAUC,SAAUX,EAAKY,GAAIC,KAAMb,EAAKc,QAAQD,KAAME,YAAaf,EAAKc,QAAQC,gBAExO,EAAK9B,SAAS,CAAC+B,oBAAqBxB,EAAcyB,kBAAmBrB,EAAKsB,UAAY,MAAQ,EAAKC,UAAUvB,EAAKwB,YAAcxB,EAAKyB,aAAezB,EAAKwB,YAAc,KAAOxB,EAAK0B,SAAW,IAAKC,MAAO,QAE3MC,OAAM,SAAAD,GAAK,OAAI,EAAKtC,SAAS,CAACsC,MAAM,gCAAD,OAAkC,EAAKhC,MAAML,YA5CjF,EAAKK,MAAQ,CACXyB,oBAAqB,GACrB9B,KAAM,GACN+B,kBAAmB,GACnBQ,YAAa,GACbF,MAAO,IAPQ,E,uEAeTG,GAER,QAAGA,EAASC,MADE,c,0CASK,IAAD,OAClBC,aAAY,WACV,IAAI3B,EAAO,IAAIC,KACf,EAAKjB,SAAS,CAACwC,YAAaxB,EAAKG,eAAiB,IAAMH,EAAK4B,mBAAmB,aAC/E,O,+BAqBS,IAAI3B,KAEhB,OACE,yBAAK4B,GAAG,WACN,6BAAMC,KAAKxC,MAAMkC,aACjB,wBAAIK,GAAG,SAAP,yBACA,wCACA,yBAAKE,UAAU,YACf,2BAAOF,GAAG,YAAYG,SAAUF,KAAKhD,aAAcmD,KAAM,OAAQ9C,MAAO2C,KAAKxC,MAAML,OACnF,yBAAK8C,UAAU,YACf,4BAAQF,GAAG,mBAAmBK,QAASJ,KAAK1C,YAA5C,sBACA,yBAAKyC,GAAG,YAAYC,KAAKxC,MAAMgC,OAE/B,6BACE,yBAAKO,GAAG,WAAWC,KAAKxC,MAAM0B,mBAC7Bc,KAAKxC,MAAMyB,oBAAoBjB,KAAI,SAACC,EAAMoC,GACzC,OACE,yBAAKC,IAAKD,EAAON,GAAG,kBAClB,6BACG9B,EAAKK,KAER,6BACE,yBAAKiC,IAAKC,+BAAqCvC,EAAKa,KAAO,OAAQ2B,IAAI,cAAcC,OAAO,KAAKC,MAAM,QAEzG,6BACG1C,EAAKe,aAER,6BACGf,EAAKO,QAAU,QAAeP,EAAKS,QAAU,QAEhD,yCACYT,EAAKW,SAAW,UAMpC,yBAAKqB,UAAU,UACb,+E,GAzFuBW,IAAMC,YAyGxBC,MATf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,QC5Fcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStB,MACvB,2DCZNuB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9D,MAAK,SAAA+D,GACJA,EAAaC,gBAEdlC,OAAM,SAAAD,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.c566e029.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst weatherBitApiKey = '679dcaf864aa415c812b8a4fe23ba67f';\n\nclass MyWeatherComponent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      weatherForecastData: [],\n      city: '',\n      returnedCityState: '',\n      currentTime: '',\n      error: ''\n    }\n  }\n\n  onChangeCity = (e) => {\n    this.setState({city: e.target.value});\n  }\n\n  isNumeric(inputtxt) { \n    var letters = /^[0-9]+$/;\n    if(inputtxt.match(letters)) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      let date = new Date();\n      this.setState({currentTime: date.toDateString() + ' ' + date.toLocaleTimeString('en-US')})\n    }, 1000);\n  }\n\n\n\n  getWeather = () => {\n    let url = `https://api.weatherbit.io/v2.0/forecast/daily?city=${this.state.city}&units=I&key=${weatherBitApiKey}`;\n    let selectedData = [];\n\n    fetch(url)\n    .then(res => res.json())\n    .then(json => {\n      selectedData = json.data.slice(0, 7).map((item) => {\n        return({date: new Date(item.datetime).toDateString(), day: new Date(item.datetime).toDateString().substr(0, 3), maxTemp: item.max_temp, minTemp: item.min_temp, humidity: item.rh, icon: item.weather.icon, description: item.weather.description})\n      })\n      this.setState({weatherForecastData: selectedData, returnedCityState: json.city_name + ', ' + (this.isNumeric(json.state_code) ? json.country_code : json.state_code) + ' (' + json.timezone + ')', error: ''});\n    })\n    .catch(error => this.setState({error: `Error locating forecast for: ${this.state.city}`}))\n  }\n\n  render() {\n    let today = new Date();\n    let days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\n    return(\n      <div id='mainDiv'>\n        <div>{this.state.currentTime}</div>\n        <h1 id='title'>Winnetka Weatherworks</h1>\n        <label>City:</label>\n        <div className=\"divider\"/>\n        <input id='cityInput' onChange={this.onChangeCity} name={'City'} value={this.state.city}></input>\n        <div className=\"divider\"/>\n        <button id='getWeatherButton' onClick={this.getWeather}>Get 7-day Forecast</button>\n        <div id='errorDiv'>{this.state.error}</div>\n\n        <div>\n          <div id='cityDiv'>{this.state.returnedCityState}</div>\n          {this.state.weatherForecastData.map((item, index) => {\n            return(\n              <div key={index} id='forecastDayDiv'>\n                <div>\n                  {item.day}\n                </div>  \n                <div>\n                  <img src={process.env.PUBLIC_URL + '/icons/' + item.icon + '.png'} alt=\"Smiley face\" height=\"80\" width=\"80\"/>\n                </div>\n                <div>\n                  {item.description}\n                </div>\n                <div>\n                  {item.maxTemp + '\\xB0' + '/' + item.minTemp + '\\xB0'}\n                </div>\n                <div>\n                  Humidity {item.humidity + '%'}\n                </div>\n              </div>\n            )\n          })}\n        </div>\n        <div className=\"footer\">\n          <p>Winnetka Weatherworks, Inc. Copyright 2020</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MyWeatherComponent>\n      </MyWeatherComponent>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}